---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// works„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Åã„Çâ‰ΩúÂìÅ„ÇíÂèñÂæó
const allWorks = await getCollection('works');
const publishedWorks = allWorks
  .filter(work => work.data.status === 'published' || work.data.status === 'coming-soon')
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

const categoryNames = {
  game: '„Ç≤„Éº„É†',
  web: 'Web„Ç¢„Éó„É™',
  other: '„Åù„ÅÆ‰ªñ'
};

const statusNames = {
  published: 'ÂÖ¨Èñã‰∏≠',
  'coming-soon': 'Ê∫ñÂÇô‰∏≠',
  draft: '‰∏ãÊõ∏„Åç'
};
---

<BaseLayout 
  title="Works - „É¢„É´„É¢ Portfolio" 
  description="Âà∂‰Ωú„Åó„Åü‰ΩúÂìÅ„ÇÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÁ¥π‰ªã„Éö„Éº„Ç∏„Åß„Åô„ÄÇWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇÑUnity„Ç≤„Éº„É†„Å™„Å©„ÇíÊé≤Ëºâ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ"
>
  <div class="works-container">
    <header class="page-header">
      <h1>Works</h1>
      <p class="page-subtitle">Âà∂‰Ωú„Åó„Åü‰ΩúÂìÅ„Éª„Éó„É≠„Ç∏„Çß„ÇØ„Éà</p>
    </header>
    
    <!-- „Éï„Ç£„É´„Çø„Éº -->
    <section class="filter-section">
      <h2 class="filter-title">Category</h2>
      <div class="filter-buttons">
        <button class="filter-btn active" data-category="all">All</button>
        <button class="filter-btn" data-category="web">Web App</button>
        <button class="filter-btn" data-category="game">Game</button>
        <button class="filter-btn" data-category="other">Other</button>
      </div>
    </section>
    
    <!-- ‰ΩúÂìÅ‰∏ÄË¶ß -->
    <section class="works-grid">
      {publishedWorks.map((work) => {
        const formattedDate = work.data.date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long' });
        return (
          <article class="work-card" data-category={work.data.category}>
            <div class="work-image">
              {work.data.image ? (
                <img src={work.data.image} alt={work.data.title} loading="lazy" />
              ) : (
                <div class="image-placeholder">
                  <span class="placeholder-icon">
                    {work.data.category === 'game' ? 'üéÆ' : work.data.category === 'web' ? 'üíª' : 'üìÅ'}
                  </span>
                </div>
              )}
            </div>
            <div class="work-content">
              <div class="work-meta">
                <span class="work-category">{categoryNames[work.data.category]}</span>
                <span class="work-date">{formattedDate}</span>
                {work.data.status === 'coming-soon' && (
                  <span class="status-badge">Ê∫ñÂÇô‰∏≠</span>
                )}
              </div>
              <h3 class="work-title">{work.data.title}</h3>
              <p class="work-description">{work.data.description}</p>
              <div class="work-tech">
                {work.data.technologies.map(tech => (
                  <span class="tech-tag">{tech}</span>
                ))}
              </div>
              <div class="work-actions">
                <a href={`/works/${work.slug}/`} class="btn-primary">Ë©≥Á¥∞„ÇíË¶ã„Çã</a>
                {work.data.demo && work.data.status === 'published' && (
                  <a href={work.data.demo} class="btn-secondary" target="_blank" rel="noopener noreferrer">
                    {work.data.demo.includes('steam') ? 'Steam „ÅßÈÅä„Å∂' : 
                     work.data.demo.includes('github') ? 'GitHub' : 
                     work.data.demo.startsWith('/works/') ? '„Éó„É¨„Ç§' : '„Éá„É¢„ÇíË¶ã„Çã'}
                  </a>
                )}
                {work.data.demo && work.data.status === 'coming-soon' && (
                  <button class="btn-secondary" disabled>Ê∫ñÂÇô‰∏≠</button>
                )}
              </div>
            </div>
          </article>
        );
      })}
    </section>
    
    <!-- Á©∫„ÅÆÁä∂ÊÖãÔºà„Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®ÊôÇÔºâ -->
    <div class="empty-state" id="emptyState" style="display: none;">
      <div class="empty-icon">üîç</div>
      <h3>Ë©≤ÂΩì„Åô„Çã‰ΩúÂìÅ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h3>
      <p>Âà•„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ</p>
    </div>
    
    <!-- AdSense Â∫ÉÂëä -->
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-client="ca-pub-1222095464915408"
         data-ad-slot="auto"
         data-ad-format="auto"
         data-full-width-responsive="true"></ins>
    <script>
         (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
  </div>
</BaseLayout>

<style>
  .works-container {
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  .page-header h1 {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: var(--accent);
  }
  
  .page-subtitle {
    font-size: 1.125rem;
    color: var(--text-secondary);
  }
  
  /* „Éï„Ç£„É´„Çø„Éº */
  .filter-section {
    margin-bottom: 3rem;
    padding: 1.5rem;
    border: 1px solid var(--border);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.02);
  }
  
  .filter-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--text-primary);
  }
  
  .filter-buttons {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }
  
  .filter-btn {
    padding: 0.5rem 1.25rem;
    border: 1px solid var(--border);
    border-radius: 25px;
    background: transparent;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
  }
  
  .filter-btn:hover,
  .filter-btn.active {
    background: var(--accent);
    color: var(--bg-primary);
    border-color: var(--accent);
  }
  
  /* ‰ΩúÂìÅ„Ç∞„É™„ÉÉ„Éâ */
  .works-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin-bottom: 3rem;
  }
  
  .work-card {
    border: 1px solid var(--border);
    border-radius: 12px;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.02);
    transition: all 0.3s ease;
  }
  
  .work-card:hover {
    transform: translateY(-4px);
    border-color: var(--accent);
    box-shadow: 0 8px 32px rgba(138, 180, 248, 0.1);
  }
  
  .work-image {
    aspect-ratio: 16/9;
    overflow: hidden;
  }
  
  .image-placeholder {
    width: 100%;
    height: 100%;
    background: var(--border);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
  }
  
  .work-card:hover .image-placeholder {
    background: var(--accent);
  }
  
  .placeholder-icon {
    font-size: 3rem;
    opacity: 0.7;
  }
  
  .work-content {
    padding: 1.5rem;
  }
  
  .work-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }
  
  .work-category {
    color: var(--accent);
    font-weight: 500;
  }
  
  .work-date {
    color: var(--text-secondary);
  }
  
  .work-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
  }
  
  .work-description {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  
  .work-tech {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1.5rem;
  }
  
  .tech-tag {
    background: rgba(138, 180, 248, 0.1);
    color: var(--accent);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .work-actions {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }
  
  .btn-primary,
  .btn-secondary {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 1px solid;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn-primary {
    background: var(--accent);
    color: var(--bg-primary);
    border-color: var(--accent);
  }
  
  .btn-primary:hover:not(:disabled) {
    background: transparent;
    color: var(--accent);
  }
  
  .btn-secondary {
    background: transparent;
    color: var(--accent);
    border-color: var(--accent);
  }
  
  .btn-secondary:hover:not(:disabled) {
    background: var(--accent);
    color: var(--bg-primary);
  }
  
  .btn-primary:disabled,
  .btn-secondary:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  /* Á©∫„ÅÆÁä∂ÊÖã */
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    border: 2px dashed var(--border);
    border-radius: 12px;
    margin: 2rem 0;
  }
  
  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
  }
  
  .empty-state h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
  }
  
  .empty-state p {
    color: var(--text-secondary);
    font-size: 1.125rem;
  }
  
  /* „É¨„Çπ„Éù„É≥„Ç∑„Éñ */
  @media (max-width: 768px) {
    .page-header h1 {
      font-size: 2rem;
    }
    
    .works-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .filter-buttons {
      gap: 0.5rem;
    }
    
    .filter-btn {
      font-size: 0.8rem;
      padding: 0.4rem 1rem;
    }
    
    .work-content {
      padding: 1.25rem;
    }
    
    .work-actions {
      flex-direction: column;
    }
    
    .btn-primary,
    .btn-secondary {
      text-align: center;
    }
    
    .empty-state {
      padding: 3rem 1rem;
    }
    
    .empty-icon {
      font-size: 3rem;
    }
    
    .empty-state h3 {
      font-size: 1.25rem;
    }
    
    .empty-state p {
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const workCards = document.querySelectorAll('.work-card');
    const emptyState = document.getElementById('emptyState');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Éú„Çø„É≥„ÅÆÂàá„ÇäÊõø„Åà
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        const selectedCategory = button.getAttribute('data-category');
        let visibleCards = 0;
        
        workCards.forEach(card => {
          const cardCategory = card.getAttribute('data-category');
          
          if (selectedCategory === 'all' || cardCategory === selectedCategory) {
            card.style.display = 'block';
            visibleCards++;
          } else {
            card.style.display = 'none';
          }
        });
        
        // Á©∫„ÅÆÁä∂ÊÖã„ÅÆË°®Á§∫/ÈùûË°®Á§∫
        if (emptyState) {
          if (visibleCards === 0) {
            emptyState.style.display = 'block';
          } else {
            emptyState.style.display = 'none';
          }
        }
      });
    });
  });
</script>