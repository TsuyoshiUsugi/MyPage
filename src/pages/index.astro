---
import BaseLayout from '../layouts/BaseLayout.astro';
import PostCard from '../components/PostCard.astro';
import NowPlaylist from '../components/NowPlaylist.astro';
import { getCollection } from 'astro:content';

// 最新のブログ記事とWorks記事を合わせて3件取得
const allPosts = await getCollection('blog');
const allWorks = await getCollection('works');

// ブログとWorksを統一フォーマットに変換
const blogItems = allPosts.map(post => ({
  type: 'blog',
  slug: post.slug,
  title: post.data.title,
  description: post.data.description,
  date: post.data.pubDate,
  priority: post.data.priority || 0,
  tags: post.data.tags,
  url: `/blog/${post.slug}/`
}));

const workItems = allWorks
  .filter(work => work.data.status === 'published')
  .map(work => ({
    type: 'works',
    slug: work.slug,
    title: work.data.title,
    description: work.data.description,
    date: work.data.date,
    priority: work.data.priority || 0,
    tags: work.data.technologies,
    url: `/works/${work.slug}/`
  }));

// 全てを合わせて日付・優先度でソート
const latestPosts = [...blogItems, ...workItems]
  .sort((a, b) => {
    const dateA = new Date(a.date).getTime();
    const dateB = new Date(b.date).getTime();
    if (dateA === dateB) {
      // 同じ日付の場合は優先度で並び替え（数値が大きい方が後に表示）
      return a.priority - b.priority;
    }
    return dateB - dateA;
  })
  .slice(0, 3);

// デバッグ用
console.log('All works:', allWorks.map(w => ({ slug: w.slug, status: w.data.status, image: w.data.image })));
console.log('Published works with images:', allWorks.filter(work => work.data.image && work.data.status === 'published'));
---

<BaseLayout 
  title="モルモのテック?ブログ" 
  description="エンジニア・開発者のポートフォリオサイト。技術ブログ、作品紹介、音楽プレイリストなどを掲載しています。"
>
  <!-- ヒーローセクション -->
  <section class="hero">
    <!-- 背景カルーセル -->
    {allWorks.filter(work => work.data.image && work.data.status === 'published').length > 0 && (
      <div class="hero-background">
        <div class="carousel-container animate">
          {/* 最初のセット */}
          {allWorks.filter(work => work.data.image && work.data.status === 'published').map((work, index) => (
            <div class="carousel-slide">
              <img src={work.data.image} alt={work.data.title} loading="lazy" />
            </div>
          ))}
          {/* 2つ目のセット（シームレスループ用） */}
          {allWorks.filter(work => work.data.image && work.data.status === 'published').map((work, index) => (
            <div class="carousel-slide">
              <img src={work.data.image} alt={work.data.title} loading="lazy" />
            </div>
          ))}
          {/* 3つ目のセット（シームレスループ用） */}
          {allWorks.filter(work => work.data.image && work.data.status === 'published').map((work, index) => (
            <div class="carousel-slide">
              <img src={work.data.image} alt={work.data.title} loading="lazy" />
            </div>
          ))}
          {/* 4つ目のセット（シームレスループ用） */}
          {allWorks.filter(work => work.data.image && work.data.status === 'published').map((work, index) => (
            <div class="carousel-slide">
              <img src={work.data.image} alt={work.data.title} loading="lazy" />
            </div>
          ))}
          {/* 5つ目のセット（シームレスループ用） */}
          {allWorks.filter(work => work.data.image && work.data.status === 'published').map((work, index) => (
            <div class="carousel-slide">
              <img src={work.data.image} alt={work.data.title} loading="lazy" />
            </div>
          ))}
        </div>
      </div>
    )}
    
    <!-- 透明オーバーレイフィルター -->
    <div class="hero-overlay"></div>
    
    <div class="hero-content">
      <h1 class="hero-title" id="greeting-title">
        <span id="greeting-text">こんにちは</span>、<span class="accent">モルモ</span> です
      </h1>
      <p class="hero-description">
        エンジニア・開発者として日々学んだことや作品を紹介しています。<br />
        技術ブログやプロジェクト、趣味の音楽なども共有しています。
      </p>
      <div class="hero-actions">
        <a href="/about" class="btn-primary">About Me</a>
        <a href="/works" class="btn-secondary">Works</a>
        <a href="https://x.com/UT_00006" class="btn-social btn-x" target="_blank" rel="noopener noreferrer">
          <svg class="social-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
          </svg>
        </a>
        <a href="https://github.com/TsuyoshiUsugi" class="btn-social btn-github" target="_blank" rel="noopener noreferrer">
          <svg class="social-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.30 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
          GitHub
        </a>
      </div>
    </div>
  </section>

  <!-- 最新ブログ記事 -->
  <section class="latest-posts">
    <div class="section-header">
      <h2>Latest Posts</h2>
      <a href="/blog" class="view-all">すべて見る →</a>
    </div>
    
    {latestPosts.length > 0 ? (
      <div class="posts-grid">
        {latestPosts.map((item) => (
          <a href={item.url} class="post-item">
            <article class="post-card">
              <div class="post-meta">
                <span class="post-type">{item.type === 'blog' ? 'Blog' : 'Works'}</span>
                <time datetime={item.date.toISOString()}>
                  {item.date.toLocaleDateString('ja-JP', { year: 'numeric', month: 'long', day: 'numeric' })}
                </time>
              </div>
              <h3 class="post-title">{item.title}</h3>
              <p class="post-description">{item.description}</p>
              {item.tags && item.tags.length > 0 && (
                <div class="post-tags">
                  {item.tags.slice(0, 3).map(tag => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              )}
            </article>
          </a>
        ))}
      </div>
    ) : (
      <div class="empty-state">
        <p>まだ記事がありません。近日公開予定です！</p>
      </div>
    )}
  </section>

  <!-- Now Listening プレイリスト -->
  <NowPlaylist />

  <!-- 作品紹介セクション -->
  <section class="works-preview">
    <div class="section-header">
      <h2>Featured Works</h2>
      <a href="/works" class="view-all">すべて見る →</a>
    </div>
    
    {workItems.length > 0 ? (
      <div class="works-grid">
        {workItems.slice(0, 3).map((work) => (
          <a href={work.url} class="work-card">
            <div class="work-image">
              {allWorks.find(w => w.slug === work.slug)?.data.image ? (
                <img 
                  src={allWorks.find(w => w.slug === work.slug)?.data.image} 
                  alt={work.title} 
                  loading="lazy" 
                />
              ) : (
                <div class="work-placeholder">
                  <span>
                    {allWorks.find(w => w.slug === work.slug)?.data.category === 'game' ? '🎮' : 
                     allWorks.find(w => w.slug === work.slug)?.data.category === 'web' ? '💻' : '📁'}
                  </span>
                </div>
              )}
            </div>
            <div class="work-content">
              <h3>{work.title}</h3>
              <p>{work.description}</p>
              {work.tags && work.tags.length > 0 && (
                <div class="work-tags">
                  {work.tags.slice(0, 3).map(tag => (
                    <span class="tech-tag">{tag}</span>
                  ))}
                </div>
              )}
            </div>
          </a>
        ))}
      </div>
    ) : (
      <div class="empty-works">
        <div class="empty-icon">💼</div>
        <p>作品を準備中です。近日公開予定！</p>
      </div>
    )}
  </section>

  <!-- AdSense 広告 -->
  <ins class="adsbygoogle"
       style="display:block"
       data-ad-client="ca-pub-1222095464915408"
       data-ad-slot="auto"
       data-ad-format="auto"
       data-full-width-responsive="true"></ins>
  <script>
       (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</BaseLayout>

<style>
  /* 背景カルーセル */
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
  }
  
  .carousel-container {
    display: flex;
    width: 1000%;
    height: 100%;
    gap: 0;
    margin: 0;
    padding: 0;
  }
  
  .carousel-container.animate {
    animation: carousel 30s infinite linear;
  }
  
  .carousel-slide {
    flex: none;
    width: 10%;
    height: 100%;
    position: relative;
    overflow: hidden;
    margin: 0;
    padding: 0;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    opacity: 0.6;
    display: block;
    margin: 0;
    padding: 0;
  }
  
  @keyframes carousel {
    0% { transform: translateX(0); }
    100% { transform: translateX(-20%); }
  }

  /* ヒーローセクション */
  .hero {
    position: relative;
    text-align: center;
    padding: 6rem 0 8rem 0;
    overflow: hidden;
  }
  
  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
    z-index: 0;
  }
  
  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 700px;
    margin: 0 auto;
    padding: 3rem 2rem;
  }
  
  .hero-title, .hero-description {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
  }
  
  .hero-title {
    font-size: 3rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 1.5rem;
  }
  
  .accent {
    color: var(--accent);
  }
  
  .hero-description {
    font-size: 1.125rem;
    color: var(--text-secondary);
    line-height: 1.7;
    margin-bottom: 2rem;
  }
  
  .hero-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .btn-primary,
  .btn-secondary,
  .btn-social {
    padding: 0.6rem 1.2rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 2px solid;
    min-width: 80px;
    text-align: center;
    justify-content: center;
    font-size: 0.875rem;
  }
  
  .btn-primary {
    background: var(--accent);
    color: var(--bg-primary);
    border-color: var(--accent);
  }
  
  .btn-primary:hover {
    background: transparent;
    color: var(--accent);
  }
  
  .btn-secondary {
    background: transparent;
    color: var(--accent);
    border-color: var(--accent);
  }
  
  .btn-secondary:hover {
    background: var(--accent);
    color: var(--bg-primary);
  }
  
  .btn-social {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .social-icon {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }
  
  .btn-social:hover {
    background: var(--accent);
    color: var(--bg-primary);
    border-color: var(--accent);
  }
  
  /* ブランドカラー */
  
  .btn-x {
    background: #000000;
    color: #ffffff;
    border-color: #000000;
  }
  
  .btn-x:hover {
    background: #333333;
    border-color: #333333;
    color: #ffffff;
  }
  
  .btn-github {
    background: #24292e;
    color: #ffffff;
    border-color: #24292e;
  }
  
  .btn-github:hover {
    background: #1a1e22;
    border-color: #1a1e22;
    color: #ffffff;
  }
  
  /* セクション共通 */
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }
  
  .section-header h2 {
    font-size: 2rem;
    font-weight: 600;
  }
  
  .view-all {
    color: var(--accent);
    text-decoration: none;
    font-size: 0.875rem;
    transition: opacity 0.3s ease;
  }
  
  .view-all:hover {
    opacity: 0.8;
  }
  
  /* 最新ブログ記事 */
  .latest-posts {
    margin: 4rem 0;
  }
  
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  .post-item {
    text-decoration: none;
    color: inherit;
  }
  
  .post-card {
    border: 1px solid var(--border);
    border-radius: 12px;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.02);
    transition: all 0.3s ease;
    height: 100%;
  }
  
  .post-card:hover {
    transform: translateY(-4px);
    border-color: var(--accent);
    box-shadow: 0 8px 32px rgba(138, 180, 248, 0.1);
  }
  
  .post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }
  
  .post-type {
    background: var(--accent);
    color: var(--bg-primary);
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-weight: 500;
  }
  
  .post-meta time {
    color: var(--text-secondary);
  }
  
  .post-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
  }
  
  .post-description {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  
  .post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .tag {
    background: rgba(138, 180, 248, 0.1);
    color: var(--accent);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .empty-state {
    text-align: center;
    padding: 3rem 0;
    color: var(--text-secondary);
  }
  
  /* 作品紹介 */
  .works-preview {
    margin: 4rem 0;
  }
  
  .works-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
  }
  
  .works-grid .work-card {
    max-width: none;
    width: 100%;
  }
  
  .work-card {
    display: block;
    text-decoration: none;
    color: inherit;
    border: 1px solid var(--border);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.02);
  }
  
  .work-card:hover {
    transform: translateY(-4px);
    border-color: var(--accent);
    box-shadow: 0 8px 32px rgba(138, 180, 248, 0.1);
  }
  
  .work-image {
    aspect-ratio: 16/9;
    overflow: hidden;
  }
  
  .work-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .work-placeholder {
    aspect-ratio: 16/9;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--border);
    font-size: 3rem;
  }
  
  .work-content {
    padding: 1.5rem;
  }
  
  .work-content h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
  }
  
  .work-content p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  
  .work-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .tech-tag {
    background: rgba(138, 180, 248, 0.1);
    color: var(--accent);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .empty-works {
    text-align: center;
    padding: 3rem 0;
    color: var(--text-secondary);
  }
  
  .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }
  
  /* レスポンシブ */
  @media (max-width: 768px) {
    .hero {
      padding: 4rem 0 5rem 0;
    }
    
    .hero-title {
      font-size: 2rem;
    }
    
    .hero-description {
      font-size: 1rem;
    }
    
    .hero-actions {
      gap: 0.75rem;
      justify-content: center;
      align-items: center;
    }
    
    .btn-primary,
    .btn-secondary,
    .btn-social {
      flex: 1;
      min-width: 100px;
      font-size: 0.875rem;
      padding: 0.6rem 1rem;
    }
    
    .social-icon {
      width: 14px;
      height: 14px;
    }
    
    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .posts-grid,
    .works-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }
</style>

<script>
  // 時間帯による挨拶の切り替え
  document.addEventListener('DOMContentLoaded', () => {
    const greetingElement = document.getElementById('greeting-text');
    if (!greetingElement) return;

    const now = new Date();
    const hour = now.getHours();
    
    let greeting = 'こんにちは';
    
    if (hour >= 5 && hour < 11) {
      greeting = 'おはようございます';
    } else if (hour >= 11 && hour < 17) {
      greeting = 'こんにちは';
    } else {
      greeting = 'こんばんわ';
    }
    
    greetingElement.textContent = greeting;
  });
</script>